name: Reservas App CI/CD Pipeline

on:
  push:
    branches:
      - 'master'
      - 'develop'
      - 'feature/**'
  delete:
    branches:
      - 'feature/**'

permissions:
  id-token: write
  contents: read

env:
  SAM_TEMPLATE: template.yaml
  AWS_REGION: us-east-1
  
  # SAM CLI configuración
  PIPELINE_USER: ${{ secrets.PIPELINE_USER }}
  PIPELINE_EXECUTION_ROLE: ${{ secrets.PIPELINE_EXECUTION_ROLE }}
  CLOUDFORMATION_EXECUTION_ROLE: ${{ secrets.CLOUDFORMATION_EXECUTION_ROLE }}
  ARTIFACTS_BUCKET: ${{ secrets.ARTIFACTS_BUCKET }}
  IMAGE_REPOSITORY: ${{ secrets.IMAGE_REPOSITORY }}
  
  # Configuración para todos los entornos
  DATABASE_USERNAME: ${{ secrets.DATABASE_USERNAME }}
  DATABASE_PASSWORD: ${{ secrets.DATABASE_PASSWORD }}
  DATABASE_NAME: ${{ secrets.DATABASE_NAME }}

  JWT_SECRET: ${{ secrets.JWT_SECRET }}

jobs:
  delete-feature:
    if: startsWith(github.event.ref, 'feature') && github.event_name == 'delete'
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - uses: aws-actions/setup-sam@v2
        with:
          use-installer: true

      - name: Configurar credenciales AWS
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}
          
      - name: Eliminar stack de feature branch
        env:
          FEATURE_BRANCH_NAME: ${{ github.event.ref }}
        run: |
          # Crear nombre de stack basado en nombre de la rama feature
          STACK_NAME="reservas-$(echo ${FEATURE_BRANCH_NAME##*/} | tr -cd '[a-zA-Z0-9-]')"
          echo "Eliminando stack: $STACK_NAME"
          
          sam delete \
            --stack-name ${STACK_NAME} \
            --region ${AWS_REGION} \
            --no-prompts

  build-and-deploy-feature:
    if: startsWith(github.ref, 'refs/heads/feature')
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - uses: aws-actions/setup-sam@v2
        with:
          use-installer: true
          
      - name: Construir aplicación
        run: sam build --template ${SAM_TEMPLATE} --use-container

      - name: Configurar credenciales AWS
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}
          
      - name: Desplegar feature branch en entorno dev
        shell: bash
        run: |
          # Crear nombre de stack basado en nombre de la rama feature
          STACK_NAME="reservas-$(echo ${GITHUB_REF##*/} | tr -cd '[a-zA-Z0-9-]')"
          echo "Desplegando a stack: $STACK_NAME"
          
          DATABASE_NAME="reservas_${GITHUB_REF##*/}"
          # Truncar nombre de BD si es muy largo
          if [ ${#DATABASE_NAME} -gt 64 ]; then
            DATABASE_NAME="${DATABASE_NAME:0:64}"
          fi
          
          sam deploy \
            --stack-name ${STACK_NAME} \
            --capabilities CAPABILITY_IAM \
            --region ${AWS_REGION} \
            --parameter-overrides "AppName=reservas AppEnv=dev DatabaseUsername=${DATABASE_USERNAME} DatabasePassword=${DATABASE_PASSWORD} DatabaseName=${DATABASE_NAME} " \
            --s3-bucket ${ARTIFACTS_BUCKET} \
            --image-repository ${IMAGE_REPOSITORY} \
            --no-fail-on-empty-changeset \
            --role-arn ${CLOUDFORMATION_EXECUTION_ROLE}

  build-and-deploy-dev:
    if: github.ref == 'refs/heads/develop'
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - uses: aws-actions/setup-sam@v2
        with:
          use-installer: true
          
      - name: Construir aplicación
        run: sam build --template ${SAM_TEMPLATE} --use-container

      - name: Configurar credenciales AWS
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}
          
      - name: Desplegar en entorno dev
        shell: bash
        run: |
          sam deploy \
            --stack-name reservas-dev \
            --capabilities CAPABILITY_IAM \
            --region ${AWS_REGION} \
            --parameter-overrides "AppName=reservas AppEnv=dev DatabaseUsername=${DATABASE_USERNAME} DatabasePassword=${DATABASE_PASSWORD} DatabaseName=reservas_dev " \
            --s3-bucket ${ARTIFACTS_BUCKET} \
            --image-repository ${IMAGE_REPOSITORY} \
            --no-fail-on-empty-changeset \
            --role-arn ${CLOUDFORMATION_EXECUTION_ROLE}

  deploy-staging:
    if: github.ref == 'refs/heads/develop'
    needs: [build-and-deploy-dev]
    runs-on: ubuntu-latest
    environment: staging  # Requiere aprobación manual
    steps:
      - uses: actions/checkout@v3
      - uses: aws-actions/setup-sam@v2
        with:
          use-installer: true
          
      - name: Construir aplicación
        run: sam build --template ${SAM_TEMPLATE} --use-container
          
      - name: Configurar credenciales AWS
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}
          
      - name: Desplegar en entorno staging
        run: |
          sam deploy \
            --stack-name reservas-staging \
            --capabilities CAPABILITY_IAM \
            --region ${AWS_REGION} \
            --parameter-overrides "AppName=reservas AppEnv=staging DatabaseUsername=${DATABASE_USERNAME} DatabasePassword=${DATABASE_PASSWORD} DatabaseName=reservas_staging " \
            --s3-bucket ${ARTIFACTS_BUCKET} \
            --image-repository ${IMAGE_REPOSITORY} \
            --no-fail-on-empty-changeset \
            --role-arn ${CLOUDFORMATION_EXECUTION_ROLE}

  deploy-prod:
    if: github.ref == 'refs/heads/master'
    runs-on: ubuntu-latest
    environment: production  # Requiere aprobación manual
    steps:
      - uses: actions/checkout@v3
      - uses: aws-actions/setup-sam@v2
        with:
          use-installer: true
          
      - name: Construir aplicación
        run: sam build --template ${SAM_TEMPLATE} --use-container
        
      - name: Configurar credenciales AWS
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}
          
      - name: Desplegar en entorno producción
        run: |
          sam deploy \
            --stack-name reservas-prod \
            --capabilities CAPABILITY_IAM \
            --region ${AWS_REGION} \
            --parameter-overrides "AppName=reservas AppEnv=prod DatabaseUsername=${DATABASE_USERNAME} DatabasePassword=${DATABASE_PASSWORD} DatabaseName=${DATABASE_NAME} JwtSecret=${JWT_SECRET} " \
            --s3-bucket ${ARTIFACTS_BUCKET} \
            --image-repository ${IMAGE_REPOSITORY} \
            --no-fail-on-empty-changeset \
            --role-arn ${CLOUDFORMATION_EXECUTION_ROLE}