name: Reservas App Pipeline

on:
  push:
    branches:
      - 'master'
      - 'develop'
      - 'feature/**'
  delete:
    branches:
      - 'feature/**'

permissions:
  id-token: write
  contents: read

env:
  SAM_TEMPLATE: template.yaml
  
  # Configuración para entorno DEV
  DEV_STACK_NAME: app-reservas-dev
  DEV_REGION: us-east-1
  DEV_DATABASE_USERNAME: ${{ secrets.DEV_DATABASE_USERNAME }}
  DEV_DATABASE_PASSWORD: ${{ secrets.DEV_DATABASE_PASSWORD }}
  DEV_DATABASE_NAME: ${{ secrets.DEV_DATABASE_NAME }}
  DEV_TICKET_SECRET_MANAGER: ${{ secrets.DEV_TICKET_SECRET_MANAGER }}

  # Configuración para entorno STAGING
  STAGING_STACK_NAME: app-reservas-staging
  STAGING_REGION: us-east-1
  STAGING_DATABASE_USERNAME: ${{ secrets.STAGING_DATABASE_USERNAME }}
  STAGING_DATABASE_PASSWORD: ${{ secrets.STAGING_DATABASE_PASSWORD }}
  STAGING_DATABASE_NAME: ${{ secrets.STAGING_DATABASE_NAME }}
  STAGING_TICKET_SECRET_MANAGER: ${{ secrets.STAGING_TICKET_SECRET_MANAGER }}

  # Configuración para entorno PROD
  PROD_STACK_NAME: app-reservas-prod
  PROD_REGION: us-east-1
  PROD_DATABASE_USERNAME: ${{ secrets.PROD_DATABASE_USERNAME }}
  PROD_DATABASE_PASSWORD: ${{ secrets.PROD_DATABASE_PASSWORD }}
  PROD_DATABASE_NAME: ${{ secrets.PROD_DATABASE_NAME }}
  PROD_TICKET_SECRET_MANAGER: ${{ secrets.PROD_TICKET_SECRET_MANAGER }}

jobs:
  delete-feature:
    if: startsWith(github.event.ref, 'feature') && github.event_name == 'delete'
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - uses: aws-actions/setup-sam@v2
        with:
          use-installer: true

      - name: Configurar credenciales AWS
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.DEV_REGION }}
          
      - name: Eliminar stack de feature branch
        env:
          FEATURE_BRANCH_NAME: ${{ github.event.ref }}
        run: |
          sam delete \
            --stack-name $(echo ${FEATURE_BRANCH_NAME##*/} | tr -cd '[a-zA-Z0-9-]') \
            --region ${DEV_REGION} \
            --no-prompts

  build-and-deploy-feature:
    if: startsWith(github.ref, 'refs/heads/feature')
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - uses: aws-actions/setup-sam@v2
        with:
          use-installer: true
          
      - name: Configurar credenciales AWS
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.DEV_REGION }}
          
      # Crear repositorios de imágenes para cada Lambda
      - name: Crear repositorios ECR si no existen
        run: |
          # Definir los nombres de los repositorios para cada lambda
          REPOS=("functions-shows" "reservation" "reservation-processor" "shows")
          
          for REPO in "${REPOS[@]}"; do
            echo "Verificando repositorio: $REPO"
            aws ecr describe-repositories --repository-names $REPO || aws ecr create-repository --repository-name $REPO
          done
      
      # Obtener la URL base del repositorio ECR
      - name: Obtener URL base de ECR
        run: |
          ACCOUNT_ID=$(aws sts get-caller-identity --query Account --output text)
          echo "ECR_REGISTRY=${ACCOUNT_ID}.dkr.ecr.${DEV_REGION}.amazonaws.com" >> $GITHUB_ENV
          
      - name: Construir y desplegar aplicación
        run: |
          # Crear bucket S3 para despliegue si no existe
          DEPLOY_BUCKET="app-reservas-deploy-$(date +%Y%m%d%H%M%S)"
          aws s3 mb s3://${DEPLOY_BUCKET}
          
          # Construir la aplicación
          sam build --template ${SAM_TEMPLATE} --use-container
          
          # Desplegar en la rama feature
          sam deploy \
            --stack-name $(echo ${GITHUB_REF##*/} | tr -cd '[a-zA-Z0-9-]') \
            --capabilities CAPABILITY_IAM \
            --region ${DEV_REGION} \
            --parameter-overrides \
              AppName=reservas \
              AppEnv=dev \
              DatabaseUsername=${DEV_DATABASE_USERNAME} \
              DatabasePassword=${DEV_DATABASE_PASSWORD} \
              DatabaseName=${DEV_DATABASE_NAME} \
              TicketSecretManager=${DEV_TICKET_SECRET_MANAGER} \
            --s3-bucket ${DEPLOY_BUCKET} \
            --image-repository ${ECR_REGISTRY} \
            --no-fail-on-empty-changeset \
            --no-confirm-changeset

  build-and-deploy-dev:
    if: github.ref == 'refs/heads/develop'
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - uses: aws-actions/setup-sam@v2
        with:
          use-installer: true
          
      - name: Configurar credenciales AWS
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.DEV_REGION }}
          
      # Crear repositorios de imágenes para cada Lambda
      - name: Crear repositorios ECR si no existen
        run: |
          # Definir los nombres de los repositorios para cada lambda
          REPOS=("functions-shows" "reservation" "reservation-processor" "shows")
          
          for REPO in "${REPOS[@]}"; do
            echo "Verificando repositorio: $REPO"
            aws ecr describe-repositories --repository-names $REPO || aws ecr create-repository --repository-name $REPO
          done
      
      # Obtener la URL base del repositorio ECR
      - name: Obtener URL base de ECR
        run: |
          ACCOUNT_ID=$(aws sts get-caller-identity --query Account --output text)
          echo "ECR_REGISTRY=${ACCOUNT_ID}.dkr.ecr.${DEV_REGION}.amazonaws.com" >> $GITHUB_ENV
          
      - name: Construir y desplegar en DEV
        run: |
          # Crear bucket S3 para despliegue si no existe
          DEPLOY_BUCKET="app-reservas-deploy-$(date +%Y%m%d%H%M%S)"
          aws s3 mb s3://${DEPLOY_BUCKET}
          
          # Construir la aplicación
          sam build --template ${SAM_TEMPLATE} --use-container
          
          # Desplegar en entorno DEV
          sam deploy \
            --stack-name ${DEV_STACK_NAME} \
            --capabilities CAPABILITY_IAM \
            --region ${DEV_REGION} \
            --parameter-overrides \
              AppName=reservas \
              AppEnv=dev \
              DatabaseUsername=${DEV_DATABASE_USERNAME} \
              DatabasePassword=${DEV_DATABASE_PASSWORD} \
              DatabaseName=${DEV_DATABASE_NAME} \
              TicketSecretManager=${DEV_TICKET_SECRET_MANAGER} \
            --s3-bucket ${DEPLOY_BUCKET} \
            --image-repository ${ECR_REGISTRY} \
            --no-fail-on-empty-changeset \
            --no-confirm-changeset

  deploy-staging:
    if: github.ref == 'refs/heads/develop'
    needs: [build-and-deploy-dev]
    runs-on: ubuntu-latest
    environment: staging  # Requiere aprobación manual
    steps:
      - uses: actions/checkout@v3
      - uses: aws-actions/setup-sam@v2
        with:
          use-installer: true
          
      - name: Configurar credenciales AWS
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.STAGING_REGION }}
          
      # Obtener la URL base del repositorio ECR
      - name: Obtener URL base de ECR
        run: |
          ACCOUNT_ID=$(aws sts get-caller-identity --query Account --output text)
          echo "ECR_REGISTRY=${ACCOUNT_ID}.dkr.ecr.${STAGING_REGION}.amazonaws.com" >> $GITHUB_ENV
          
      - name: Construir y desplegar en STAGING
        run: |
          # Crear bucket S3 para despliegue si no existe
          DEPLOY_BUCKET="app-reservas-deploy-staging-$(date +%Y%m%d%H%M%S)"
          aws s3 mb s3://${DEPLOY_BUCKET}
          
          # Construir la aplicación
          sam build --template ${SAM_TEMPLATE} --use-container
          
          # Desplegar en entorno STAGING
          sam deploy \
            --stack-name ${STAGING_STACK_NAME} \
            --capabilities CAPABILITY_IAM \
            --region ${STAGING_REGION} \
            --parameter-overrides \
              AppName=reservas \
              AppEnv=staging \
              DatabaseUsername=${STAGING_DATABASE_USERNAME} \
              DatabasePassword=${STAGING_DATABASE_PASSWORD} \
              DatabaseName=${STAGING_DATABASE_NAME} \
              TicketSecretManager=${STAGING_TICKET_SECRET_MANAGER} \
            --s3-bucket ${DEPLOY_BUCKET} \
            --image-repository ${ECR_REGISTRY} \
            --no-fail-on-empty-changeset \
            --no-confirm-changeset

  build-and-deploy-prod:
    if: github.ref == 'refs/heads/master'
    runs-on: ubuntu-latest
    environment: production  # Requiere aprobación manual
    steps:
      - uses: actions/checkout@v3
      - uses: aws-actions/setup-sam@v2
        with:
          use-installer: true
          
      - name: Configurar credenciales AWS
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.PROD_REGION }}
      
      # Crear repositorios de imágenes para cada Lambda
      - name: Crear repositorios ECR si no existen
        run: |
          # Definir los nombres de los repositorios para cada lambda
          REPOS=("functions-shows" "reservation" "reservation-processor" "shows")
          
          for REPO in "${REPOS[@]}"; do
            echo "Verificando repositorio: $REPO"
            aws ecr describe-repositories --repository-names $REPO || aws ecr create-repository --repository-name $REPO
          done
      
      # Obtener la URL base del repositorio ECR
      - name: Obtener URL base de ECR
        run: |
          ACCOUNT_ID=$(aws sts get-caller-identity --query Account --output text)
          echo "ECR_REGISTRY=${ACCOUNT_ID}.dkr.ecr.${PROD_REGION}.amazonaws.com" >> $GITHUB_ENV
          
      - name: Construir y desplegar en PROD
        run: |
          # Crear bucket S3 para despliegue si no existe
          DEPLOY_BUCKET="app-reservas-deploy-prod-$(date +%Y%m%d%H%M%S)"
          aws s3 mb s3://${DEPLOY_BUCKET}
          
          # Construir la aplicación
          sam build --template ${SAM_TEMPLATE} --use-container
          
          # Desplegar en entorno PROD
          sam deploy \
            --stack-name ${PROD_STACK_NAME} \
            --capabilities CAPABILITY_IAM \
            --region ${PROD_REGION} \
            --parameter-overrides \
              AppName=reservas \
              AppEnv=prod \
              DatabaseUsername=${PROD_DATABASE_USERNAME} \
              DatabasePassword=${PROD_DATABASE_PASSWORD} \
              DatabaseName=${PROD_DATABASE_NAME} \
              TicketSecretManager=${PROD_TICKET_SECRET_MANAGER} \
            --s3-bucket ${DEPLOY_BUCKET} \
            --image-repository ${ECR_REGISTRY} \
            --no-fail-on-empty-changeset \
            --no-confirm-changeset